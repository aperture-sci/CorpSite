version: '1.0'
stages:
  - clone
  - build
  - test
  - push
  - deploy


# {
#   "toolId": "${{sn_devops_toolId}}",
#   "buildNumber": "${CF_BUILD_ID}",
#   "nativeId": "HILR/Prod #${CF_BUILD_ID}",
#   "name": "HILR/Prod",
#   "id": "HILR/Prod #${CF_BUILD_ID}",
#   "url": "https://dev.azure.com/lenn/CorpSite-ADO/_build/results?buildId=100#Prod/",
#   "isMultiBranch": "false",
#   "orchestrationTaskUrl": "https://dev.azure.com/lenn/CorpSite-ADO/_build?name=HILR#Prod",
#   "orchestrationTaskName": "CorpSite-ADO/HILR#Prod",
#   "upstreamTaskUrl": "https://dev.azure.com/lenn/CorpSite-ADO/_build/results?buildId=100#UAT/",
#   "upstreamId": "CorpSite-ADO/HILR#UAT",
#   "result": "building",
#   "startDateTime": "2020-03-20 22:59:27"
# }

# {
#   "toolId": "${{sn_devops_toolId}}",
#   "buildNumber": "${CF_BUILD_ID}",
#   "nativeId": "${{CF_PIPELINE_NAME}} #${CF_BUILD_ID}",
#   "name": "${{CF_PIPELINE_NAME}}",
#   "id": "${{CF_PIPELINE_NAME}} #${CF_BUILD_ID}",
#   "url": "${{CF_PIPELINE_NAME}}",
#   "isMultiBranch": "true",
#   "orchestrationTaskUrl": "${{CF_BUILD_URL}}?step=${{CF_STEP_NAME}}",
#   "orchestrationTaskName": "${{CF_PIPELINE_NAME}}#${{CF_STEP_NAME}}",
# }

steps:
  sn_stage_start:
    title: "SN DevOps start clone"
    image: curlimages/curl
    stage: clone
    commands:
      - |
        echo "CF_BUILD_URL: ${CF_BUILD_URL}"
        echo "CF_BUILD_ID: ${CF_BUILD_ID}"
        echo "CF_STEP: ${CF_STEP_NAME}"
        env | grep CF
        curl -X POST --header "Content-Type: application/json" --data '{"toolId":"${{sn_devops_toolId}}","buildNumber":"${CF_BUILD_ID}","nativeId":"${{CF_PIPELINE_NAME}} #${CF_BUILD_ID}","name":"${{CF_PIPELINE_NAME}}","id":"${{CF_PIPELINE_NAME}} #${CF_BUILD_ID}","url":"${{CF_PIPELINE_NAME}}","isMultiBranch":"true","orchestrationTaskUrl":"${{CF_BUILD_URL}}?step=${{CF_STEP_NAME}}","orchestrationTaskName":"${{CF_PIPELINE_NAME}}#${{CF_STEP_NAME}}"}' ${sn_devops_user}:${sn_devops_password}@${sn_devops_url}/api/sn_devops/devops/orchestrate?toolId=${sn_devops_toolId}

  clone:
    title: Cloning repository
    type: git-clone
    repo: 'https://github.com/lrochette/CorpSite'
    revision: master
    stage: clone
  build_application:
    title: "Building Globex website"
    image: maven:3.3-jdk-8
    working_directory: "${{clone}}"
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}"
    commands:
      - mvn -Dmaven.repo.local=/codefresh/volume/m2_repository package
    stage: "build"

  test:
    title: "Running test"
    type: "freestyle" # Run any command
    image: maven:3.3-jdk-8
    working_directory: "${{clone}}"
    commands:
      - mvn -Dmaven.repo.local=/codefresh/volume/m2_repository test
    stage: "test"

  build_image:
    title: "Building tomcat container"
    type: "build"
    image_name: "lrochette/globex"
    working_directory: "${{clone}}"
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}"
    dockerfile: "Dockerfile"
    disable_push: true
    stage: "build"

  push:
    type: push
    title: "Pushing globex image"
    candidate: ${{build_image}}
    image_name: "lrochette/globex"
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}"
    registry: docker-lr
    stage: "push"

  DeployToMyCluster:
    title: deploying to cluster
    type: deploy
    stage: deploy
    kind: kubernetes
    cluster:  laurent-cluster@codefresh-support
    namespace: default
    service: globex
    candidate:
      image: lrochette/globex:${{CF_BRANCH_TAG_NORMALIZED}}
      registry: docker-lr
